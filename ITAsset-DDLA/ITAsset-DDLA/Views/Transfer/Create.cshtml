﻿@using ITAsset_DDLA.Database.Models.DomainModels
@using ITAsset_DDLA.Database.Models.ViewModels.Shared
@using ITAsset_DDLA.Helpers.Enums
@using ddla.ITApplication.Database.Models.ViewModels.Product
@model CreateTransferViewModel

@{
    ViewData["Title"] = "Yeni məhsul qeydiyyatı";
}

    <div class="container">
        <div class="logo-header">
            <img src="~/assets/images/ddlaLogo.png" alt="DDLA Logo" class="img-fluid">
            <div class="logo-text">
                <h1>Yeni məhsul qeydiyyatı</h1>
                <small>Dövlət Dəniz və Liman Agentliyi</small>
            </div>
        </div>

        <div class="registration-card">

            <form method="post" asp-action="Create" enctype="multipart/form-data" id="addForm">
                <div class="row">
                    <div class="col-md-6">
                        <!-- Recipient Section -->
                        <div class="mb-4">
                            <h5 class="mb-3">Məhsulu təhvil alan</h5>
                        <select asp-for="CreateTransferProductViewModel.Recipient" id="recipientSelect" class="form-select" onchange="updateShobe()">
                                <option value="" disabled selected>Seçim edin</option>
                                @foreach (var user in Model.LdapUsers)
                                {
                                    <option value="@user.FullName" data-shobe="@user.Shobe">
                                        @user.FullName
                                    </option>
                                }
                            </select>

                            <span asp-validation-for="CreateTransferProductViewModel.Recipient" class="error-message" style="color: red;"></span>
                        </div>
                        <!-- Product Selection -->
                        <div class="mb-4">
                            <h5 class="mb-3">Məhsul</h5>

                            <!-- Product Type Selection -->
                            <div class="mb-3">
                                <label class="form-label">Məhsul adı:</label>
                                <select id="productType" class="form-select" onchange="filterProductsByType()">
                                    <option value="">-- Bütün növlər --</option>
                                    @foreach (var type in Model.StockProducts.Select(p => p.Name).Distinct())
                                        {
                                        <option value="@type">@type</option>
                                        }
                                </select>
                            </div>
                            <!-- Product Selection (Checkboxes) -->
                            <div class="mb-3">
                                <label class="form-label">Məhsullar (Çoxlu seçim):</label>
                                <div id="productCheckboxes" style="max-height: 100px; overflow-y: auto;">
                                    @foreach (var product in Model.StockProducts.Where(p => p.IsActive))
                                    {
                                        <div class="form-check product-item" data-type="@product.Name">
                                            <input class="form-check-input product-checkbox"
                                                   type="checkbox"
                                                   name="CreateTransferProductViewModel.StockProductIds"
                                                   value="@product.Id"
                                                   id="product_@product.Id"
                                                   onchange="updateSelectedProducts()" />
                                            <label class="form-check-label" for="product_@product.Id">
                                                @product.Name (İnventar: @product.InventoryCode)
                                            </label>
                                        </div>
                                    }
                                </div>
                                <span asp-validation-for="CreateTransferProductViewModel.StockProductIds" class="error-message"></span>
                            </div>

                            <!-- Selected Products Display -->
                            <div id="selectedProductsContainer" class="mt-3">
                                <h6>Seçilmiş Məhsullar:</h6>
                                <div id="selectedProductsList" class="list-group">
                                    <div class="text-muted">Heç bir məhsul seçilməyib</div>
                                </div>
                            </div>
                        </div>


                    </div>

                    <div class="col-md-6">
                        <!-- Department -->
                        <div class="mb-4">
                            <h5 class="mb-3">Departamentə</h5>
                            <select asp-for="CreateTransferProductViewModel.DepartmentSection" id="unitSelect" class="form-control" readonly>
                                <option value="">-- Seçilmiş istifadəçinin şöbəsi --</option>
                            </select>
                        </div>

                        <!-- Date -->
                        <div class="mb-4" style="margin-top: 3.3rem !important;">
                            <h5 class="mb-3">Alınma tarixi</h5>
                            <input asp-for="CreateTransferProductViewModel.DateofReceipt" class="form-control" type="date" />
                        </div>
                    </div>
                </div>
                <!-- Buttons -->
                <div class="d-flex justify-content-end mt-4">
                    <a asp-action="Index" class="btn btn-secondary me-2">
                        <i class="fas fa-times me-1"></i> Bağla
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> Yadda saxla
                    </button>
                </div>
            </form>
        </div>
    </div>
<script>
    // Track all products data
     const allProducts = [
         @foreach (var product in Model.StockProducts)
         {
           <text>{
               id: "@product.Id",
               name: "@product.Name",
               inventoryCode: "@product.InventoryCode",
               type: "@product.Name"
           },</text>
         }
     ];

     // Filter products by type
     function filterProductsByType() {
         const selectedType = document.getElementById('productType').value;
         const productItems = document.querySelectorAll('.product-item');

         productItems.forEach(item => {
             if (selectedType === "" || item.dataset.type === selectedType) {
                 item.style.display = 'block';
             } else {
                 item.style.display = 'none';
             }
         });
     }

     // Update selected products list
     function updateSelectedProducts() {
         const checkboxes = document.querySelectorAll('.product-checkbox:checked');
         const selectedList = document.getElementById('selectedProductsList');

         if (checkboxes.length === 0) {
             selectedList.innerHTML = '<div class="text-muted">Heç bir məhsul seçilməyib</div>';
             return;
         }

         selectedList.innerHTML = '';

         checkboxes.forEach(checkbox => {
             const productId = checkbox.value;
             const product = allProducts.find(p => p.id === productId);

             if (product) {
                 const productCard = document.createElement('div');
                 productCard.className = 'list-group-item mb-2';
                 productCard.innerHTML = `
                     <div class="d-flex justify-content-between align-items-center">
                         <div>
                             <strong>${product.name}</strong><br>
                             <small>İnventar kodu: ${product.inventoryCode}</small>
                         </div>
                         <button type="button" class="btn btn-sm btn-outline-danger"
                                 onclick="unselectProduct('${product.id}')">
                             <i class="fas fa-times"></i>
                         </button>
                     </div>
                 `;
                 selectedList.appendChild(productCard);
             }
         });
     }

     // Unselect a product
     function unselectProduct(productId) {
         const checkbox = document.querySelector(`.product-checkbox[value="${productId}"]`);
         if (checkbox) {
             checkbox.checked = false;
             updateSelectedProducts();
         }
     }

     // Initialize type filter
     document.addEventListener('DOMContentLoaded', function() {
         filterProductsByType();
     });
     document.addEventListener('DOMContentLoaded', function() {
        const stockProductSelect = document.getElementById('stockProductSelect');
        const inventoryContainer = document.getElementById('inventoryItemsContainer');
        const countInput = document.getElementById('CreateTransferProductViewModel_Count');
        const selectedInventoryItems = document.getElementById('selectedInventoryItems');

        // Load inventory codes when product changes
        stockProductSelect.addEventListener('change', function() {
            const productId = this.value;

            if (!productId) {
                inventoryContainer.innerHTML = '<div class="text-muted">Zəhmət olmasa məhsul seçin</div>';
                return;
            }

            // Show loading
            inventoryContainer.innerHTML = '<div class="text-muted">Yüklənir...</div>';

            // Call server to get codes
            fetch('/YourControllerName/GetInventoryCodes?stockProductId=' + productId)
                .then(response => {
                    if (!response.ok) throw new Error('Network error');
                    return response.json();
                })
                .then(codes => {
                    if (codes.length === 0) {
                        inventoryContainer.innerHTML = '<div class="text-muted">Bu məhsul üçün inventar kodu tapılmadı</div>';
                        return;
                    }

                    inventoryContainer.innerHTML = '';
                    codes.forEach(code => {
                        const item = document.createElement('div');
                        item.className = 'inventory-item';
                        item.innerHTML = `
                            <input type="checkbox" id="inv_${code.Id}" value="${code.Id}" class="d-none">
                            <label for="inv_${code.Id}">${code.Code}</label>
                        `;
                        inventoryContainer.appendChild(item);
                    });

                    // Initialize selection handlers
                    initSelectionHandlers();
                })
                .catch(error => {
                    inventoryContainer.innerHTML = `<div class="text-danger">Xəta: ${error.message}</div>`;
                });
        });

        function initSelectionHandlers() {
            document.querySelectorAll('#inventoryItemsContainer .inventory-item label').forEach(label => {
                label.addEventListener('click', function() {
                    const checkbox = document.getElementById(this.htmlFor);
                    const requiredCount = parseInt(countInput.value) || 0;
                    const selectedCount = document.querySelectorAll('#inventoryItemsContainer input[type="checkbox"]:checked').length;

                    if (!checkbox.checked && selectedCount >= requiredCount) {
                        alert(`Maksimum ${requiredCount} inventar kodu seçə bilərsiniz`);
                        return;
                    }

                    checkbox.checked = !checkbox.checked;
                    this.closest('.inventory-item').classList.toggle('selected', checkbox.checked);
                    updateSelection();
                });
            });
        }

        function updateSelection() {
            const requiredCount = parseInt(countInput.value) || 0;
            const selectedCount = document.querySelectorAll('#inventoryItemsContainer input[type="checkbox"]:checked').length;

            document.getElementById('selectedCount').textContent = selectedCount;
            document.getElementById('requiredCount').textContent = requiredCount;
            document.getElementById('selectionError').classList.toggle('d-none', selectedCount === requiredCount);

            // Update hidden select
            selectedInventoryItems.innerHTML = '';
            document.querySelectorAll('#inventoryItemsContainer input[type="checkbox"]:checked').forEach(checkbox => {
                const option = document.createElement('option');
                option.value = checkbox.value;
                option.selected = true;
                selectedInventoryItems.appendChild(option);
            });
        }

        countInput.addEventListener('input', updateSelection);
    });
    function updateShobe() {
        var recipientSelect = document.getElementById('recipientSelect');
        var unitSelect = document.getElementById('unitSelect');
        var selectedOption = recipientSelect.options[recipientSelect.selectedIndex];
        var shobeAz = selectedOption.getAttribute('data-shobe');

        unitSelect.innerHTML = '';
        if (shobeAz) {
            var opt = document.createElement('option');
            opt.value = shobeAz;
            opt.text = shobeAz;
            opt.selected = true;
            unitSelect.appendChild(opt);
        }
    }
</script>